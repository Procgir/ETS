// <auto-generated />
using System;
using System.Collections.Generic;
using ElectronicTestSystem.Domain.Tests;
using ElectronicTestSystem.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ElectronicTestSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ElectronicTestSystem.Domain.Groups.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "ElectronicTestSystem.Domain.Groups.Group.Name#GroupName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Testings.Testing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("pk_testings");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_testings_author_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_testings_group_id");

                    b.HasIndex("TestId")
                        .HasDatabaseName("ix_testings_test_id");

                    b.ToTable("testings", (string)null);
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Testings.TestingUserAnswers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("answers");

                    b.Property<Guid>("TestingId")
                        .HasColumnType("uuid")
                        .HasColumnName("testing_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_testing_user_answers");

                    b.HasIndex("TestingId")
                        .HasDatabaseName("ix_testing_user_answers_testing_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_testing_user_answers_user_id");

                    b.ToTable("testing_user_answers", (string)null);
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Tests.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.ComplexProperty<Dictionary<string, object>>("Subject", "ElectronicTestSystem.Domain.Tests.Test.Subject#TestSubject", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("subject_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Theme", "ElectronicTestSystem.Domain.Tests.Test.Theme#TestTheme", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("theme_name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_tests");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Tests.TestQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<List<TestQuestionAnswerOption>>("Answers")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("answers");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.ComplexProperty<Dictionary<string, object>>("Body", "ElectronicTestSystem.Domain.Tests.TestQuestion.Body#TestQuestionBody", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("body_text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TrueAnswerNumber", "ElectronicTestSystem.Domain.Tests.TestQuestion.TrueAnswerNumber#TestQuestionAnswerNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("true_answer_number_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_test_questions");

                    b.HasIndex("TestId")
                        .HasDatabaseName("ix_test_questions_test_id");

                    b.ToTable("test_questions", (string)null);
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Users.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "users:read"
                        });
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Registered"
                        });
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Users.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("boolean")
                        .HasColumnName("is_teacher");

                    b.ComplexProperty<Dictionary<string, object>>("Login", "ElectronicTestSystem.Domain.Users.User.Login#UserLogin", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("login_value");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "ElectronicTestSystem.Domain.Users.User.Name#UserName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_last_name");

                            b1.Property<string>("MiddleName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_middle_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Password", "ElectronicTestSystem.Domain.Users.User.Password#UserPassword", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("password_hash");
                        });

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ElectronicTestSystem.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_role_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_role_user_users_id");

                    b.ToTable("role_user", (string)null);
                });

            modelBuilder.Entity("group_user", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid")
                        .HasColumnName("groups_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("GroupsId", "UsersId")
                        .HasName("pk_group_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_group_user_users_id");

                    b.ToTable("group_user", (string)null);
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Testings.Testing", b =>
                {
                    b.HasOne("ElectronicTestSystem.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_testings_user_author_id");

                    b.HasOne("ElectronicTestSystem.Domain.Groups.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_testings_groups_group_id");

                    b.HasOne("ElectronicTestSystem.Domain.Tests.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_testings_tests_test_id");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Testings.TestingUserAnswers", b =>
                {
                    b.HasOne("ElectronicTestSystem.Domain.Testings.Testing", null)
                        .WithMany()
                        .HasForeignKey("TestingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_testing_user_answers_testings_testing_id");

                    b.HasOne("ElectronicTestSystem.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_testing_user_answers_user_user_id");

                    b.OwnsOne("ElectronicTestSystem.Domain.Testings.Calculators.Mark", "Mark", b1 =>
                        {
                            b1.Property<Guid>("TestingUserAnswersId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("mark_value");

                            b1.HasKey("TestingUserAnswersId");

                            b1.ToTable("testing_user_answers");

                            b1.WithOwner()
                                .HasForeignKey("TestingUserAnswersId")
                                .HasConstraintName("fk_testing_user_answers_testing_user_answers_id");
                        });

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Tests.TestQuestion", b =>
                {
                    b.HasOne("ElectronicTestSystem.Domain.Tests.Test", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_test_questions_tests_test_id");
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Users.RolePermission", b =>
                {
                    b.HasOne("ElectronicTestSystem.Domain.Users.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("ElectronicTestSystem.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ElectronicTestSystem.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_role_roles_id");

                    b.HasOne("ElectronicTestSystem.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_user_user_users_id");
                });

            modelBuilder.Entity("group_user", b =>
                {
                    b.HasOne("ElectronicTestSystem.Domain.Groups.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_user_groups_groups_id");

                    b.HasOne("ElectronicTestSystem.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_user_user_users_id");
                });

            modelBuilder.Entity("ElectronicTestSystem.Domain.Tests.Test", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
